package de.tramotech.restapp.repository;

import de.tramotech.restapp.model.Customer;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.dao.EmptyResultDataAccessException;

import java.util.List;

import static de.tramotech.restapp.CustomerTestHelper.*;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;

@DataJpaTest
class CustomerRepoTest {



    @Autowired
    CustomerRepository customerRepo;

    @Test
     void saveCustomer() {
        Customer customer = generateCustomer1();

        /* Calling the save method will update the Customer entity with the id generated by the database upon insertion.
           There is no need to reassign the returned entity. Simply calling customerRepo.save(customer) will suffice.
         */
        customer = customerRepo.save(customer);
        Customer savedCustomer = customerRepo.findById(customer.getId()).orElse(null);

        assertThat(savedCustomer).isEqualTo(customer);
    }

    @Test
    void findAllCustomers() {
        Customer customer1 = generateCustomer1();
        Customer customer2 = generateCustomer2();
        customerRepo.save(customer1);
        customerRepo.save(customer2);

        List<Customer> actual = customerRepo.findAll();

        assertThat(actual).hasSize(2).contains(customer1, customer2);
    }

    @Test
    void findCustomerByCustomerNr() {
        Customer customer = generateCustomer1();
        customerRepo.save(customer);

        Customer actual = customerRepo.findCustomerByCustomerNr(CUSTOMER_NR_1).orElse(null);

        assertThat(actual).isEqualTo(customer);
    }



    @Test
    void deleteCustomerById() {
        Customer customer = generateCustomer1();

        customerRepo.save(customer);
        customerRepo.deleteById(customer.getId());
        Customer actual = customerRepo.findById(customer.getId()).orElse(null);

        assertThat(actual).isNull();
    }

    @Test
    void deleteCustomerById_NonExistingCustomer() {
        EmptyResultDataAccessException actual = assertThrows(EmptyResultDataAccessException.class, () -> customerRepo.deleteById(1L));

        assertThat(actual).hasMessage("No class de.tramotech.restapp.model.Customer entity with id 1 exists!");
    }







}